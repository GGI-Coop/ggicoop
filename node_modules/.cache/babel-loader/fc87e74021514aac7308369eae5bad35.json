{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _backgroundCover = require('background-cover');\nvar _backgroundCover2 = _interopRequireDefault(_backgroundCover);\nvar _iphoneInlineVideo = require('iphone-inline-video');\nvar _iphoneInlineVideo2 = _interopRequireDefault(_iphoneInlineVideo);\nvar _insertRule = require('insert-rule');\nvar _insertRule2 = _interopRequireDefault(_insertRule);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar iOSNavigator = typeof navigator !== 'undefined' && navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\nvar iOSVersion = iOSNavigator ? iOSNavigator[1] : null;\nvar noop = function noop() {};\nvar absolute100 = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%'\n};\nvar BackgroundVideo = function (_React$PureComponent) {\n  _inherits(BackgroundVideo, _React$PureComponent);\n  function BackgroundVideo(props) {\n    _classCallCheck(this, BackgroundVideo);\n    var _this = _possibleConstructorReturn(this, (BackgroundVideo.__proto__ || Object.getPrototypeOf(BackgroundVideo)).call(this, props));\n    _this._handleVideoReady = function () {\n      if (!_this.props.disableBackgroundCover) {\n        _this._resize();\n      }\n      _this.setState({\n        visible: true\n      });\n      _this.props.startTime && _this.setCurrentTime(_this.props.startTime);\n      _this.props.autoPlay && _this.play();\n      _this.video && _this.props.onReady(_this.video.duration);\n    };\n    _this._handleOnPlay = function () {\n      _this.props.onPlay();\n    };\n    _this._handleOnPause = function () {\n      _this.props.onPause();\n    };\n    _this._handleTimeUpdate = function () {\n      if (!_this.video) return;\n      iOSVersion && _this._handleIOSStartTime();\n      var currentTime = _this.video.currentTime;\n      var duration = _this.video.duration;\n      var progress = currentTime / duration;\n      _this.props.onTimeUpdate(currentTime, progress, duration);\n    };\n    _this._handleVideoEnd = function () {\n      _this.props.onEnd();\n    };\n    _this.state = {\n      visible: false\n    };\n    _this.startTimeIsSet = false;\n    return _this;\n  }\n  _createClass(BackgroundVideo, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.playsInline && iOSVersion) {\n        var hasAudio = !(iOSVersion && iOSVersion < 10 && this.props.autoPlay && this.props.muted); // allow autoplay on iOS < 10 for silent videos\n        var requireInteractionOnTablet = false;\n        (0, _iphoneInlineVideo2.default)(this.video, hasAudio, requireInteractionOnTablet);\n        (0, _insertRule2.default)(['video::-webkit-media-controls-start-playback-button', '.IIV::-webkit-media-controls-play-button'], {\n          display: 'none'\n        });\n      }\n      if (this.video) {\n        if (this.video.readyState !== 4) {\n          this.video.addEventListener('loadedmetadata', this._handleVideoReady);\n        } else {\n          this._handleVideoReady();\n        }\n        this.video.addEventListener('play', this._handleOnPlay);\n        this.video.addEventListener('pause', this._handleOnPause);\n        this.video.volume = this.props.volume;\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if ((this.props.containerWidth !== prevProps.containerWidth || this.props.containerHeight !== prevProps.containerHeight) && !this.props.disableBackgroundCover) {\n        this._resize();\n      }\n      if (this.video && this.props.volume !== prevProps.volume) {\n        this.video.volume = this.props.volume;\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (!this.video) return;\n      this.video.removeEventListener('loadedmetadata', this._handleVideoReady);\n      this.video.removeEventListener('play', this._handleOnPlay);\n      this.video.removeEventListener('pause', this._handleOnPause);\n    }\n  }, {\n    key: '_resize',\n    value: function _resize() {\n      this.video && (0, _backgroundCover2.default)(this.video, this.container, this.props.horizontalAlign, this.props.verticalAlign);\n    }\n  }, {\n    key: '_handleIOSStartTime',\n    value: function _handleIOSStartTime() {\n      if (!this.video) return;\n      if (this.video.currentTime < this.props.startTime && !this.startTimeIsSet) {\n        this.setCurrentTime(this.props.startTime);\n        this.startTimeIsSet = true;\n      }\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      this.video && this.video.play();\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.video && this.video.pause();\n    }\n  }, {\n    key: 'togglePlay',\n    value: function togglePlay() {\n      if (!this.video) return;\n      this.video.paused ? this.play() : this.pause();\n    }\n  }, {\n    key: 'isPaused',\n    value: function isPaused() {\n      return this.video ? this.video.paused : false;\n    }\n  }, {\n    key: 'mute',\n    value: function mute() {\n      if (!this.video) return;\n      this.video.muted = true;\n      this.props.onMute();\n    }\n  }, {\n    key: 'unmute',\n    value: function unmute() {\n      if (!this.video) return;\n      this.video.muted = false;\n      this.props.onUnmute();\n    }\n  }, {\n    key: 'toggleMute',\n    value: function toggleMute() {\n      if (!this.video) return;\n      this.video.muted ? this.unmute() : this.mute();\n    }\n  }, {\n    key: 'isMuted',\n    value: function isMuted() {\n      return this.video ? this.video.muted : false;\n    }\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(val) {\n      if (!this.video) return;\n      this.video.currentTime = val;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var visibility = this.state.visible ? 'visible' : 'hidden';\n      var videoProps = _extends({\n        ref: function ref(v) {\n          return _this2.video = v;\n        },\n        src: typeof this.props.src === 'string' ? this.props.src : null,\n        preload: this.props.preload,\n        poster: this.props.poster,\n        muted: this.props.muted,\n        loop: this.props.loop,\n        onTimeUpdate: this._handleTimeUpdate,\n        onEnded: this._handleVideoEnd\n      }, Object.assign(this.props.extraVideoElementProps, {\n        playsInline: this.props.playsInline\n      }));\n      return _react2.default.createElement('div', {\n        ref: function ref(r) {\n          return _this2.container = r;\n        },\n        className: 'BackgroundVideo ' + this.props.className,\n        style: Object.assign(_extends({}, absolute100, {\n          visibility: visibility\n        }), this.props.style),\n        onClick: this.props.onClick,\n        onKeyPress: this.props.onKeyPress,\n        tabIndex: this.props.tabIndex\n      }, _typeof(this.props.src) === 'object' ? _react2.default.createElement('video', videoProps, this.props.src.map(function (source, key) {\n        return _react2.default.createElement('source', _extends({\n          key: key\n        }, source));\n      })) : _react2.default.createElement('video', videoProps));\n    }\n  }]);\n  return BackgroundVideo;\n}(_react2.default.PureComponent);\nexports.default = BackgroundVideo;\nBackgroundVideo.propTypes = {\n  playsInline: _propTypes2.default.bool,\n  // play inline on iPhone. avoid triggering native video player\n  disableBackgroundCover: _propTypes2.default.bool,\n  // do not apply cover effect (e.g. disable it for specific screen resolution or aspect ratio)\n  style: _propTypes2.default.object,\n  className: _propTypes2.default.string,\n  containerWidth: _propTypes2.default.number,\n  containerHeight: _propTypes2.default.number,\n  src: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.array]).isRequired,\n  poster: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  horizontalAlign: _propTypes2.default.number,\n  verticalAlign: _propTypes2.default.number,\n  preload: _propTypes2.default.string,\n  muted: _propTypes2.default.bool,\n  // required to be set to true for auto play on mobile in combination with 'autoPlay' option\n  volume: _propTypes2.default.number,\n  loop: _propTypes2.default.bool,\n  autoPlay: _propTypes2.default.bool,\n  extraVideoElementProps: _propTypes2.default.object,\n  startTime: _propTypes2.default.number,\n  tabIndex: _propTypes2.default.number,\n  onReady: _propTypes2.default.func,\n  // passes back `duration`\n  onPlay: _propTypes2.default.func,\n  onPause: _propTypes2.default.func,\n  onMute: _propTypes2.default.func,\n  onUnmute: _propTypes2.default.func,\n  onTimeUpdate: _propTypes2.default.func,\n  // passes back `currentTime`, `progress` and `duration`\n  onEnd: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  onKeyPress: _propTypes2.default.func\n};\nBackgroundVideo.defaultProps = {\n  playsInline: true,\n  disableBackgroundCover: false,\n  style: {},\n  horizontalAlign: 0.5,\n  verticalAlign: 0.5,\n  preload: 'auto',\n  muted: true,\n  volume: 1,\n  loop: true,\n  autoPlay: true,\n  extraVideoElementProps: {},\n  startTime: 0,\n  tabIndex: 0,\n  onReady: noop,\n  onPlay: noop,\n  onPause: noop,\n  onMute: noop,\n  onUnmute: noop,\n  onTimeUpdate: noop,\n  onEnd: noop,\n  onClick: noop,\n  onKeyPress: noop\n};","map":null,"metadata":{},"sourceType":"script"}