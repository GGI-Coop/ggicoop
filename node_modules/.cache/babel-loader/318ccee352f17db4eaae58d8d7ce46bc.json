{"ast":null,"code":"'use strict';\n\nrequire('./object-keys');\nrequire('./array-map');\nvar camel = /([a-z])([A-Z])/g;\nvar hyphens = '$1-$2';\nvar contexts = {};\nfunction parseStyles(styles) {\n  if (typeof styles === 'string') {\n    return styles;\n  }\n  if (Object.prototype.toString.call(styles) !== '[object Object]') {\n    return '';\n  }\n  return Object.keys(styles).map(function (key) {\n    var prop = key.replace(camel, hyphens).toLowerCase();\n    return prop + ':' + styles[key];\n  }).join(';');\n}\nfunction context(name) {\n  if (contexts[name]) {\n    return contexts[name];\n  }\n  var cache;\n  var rules;\n  var remove;\n  function getStylesheet() {\n    if (cache) {\n      return cache;\n    }\n    var style = document.createElement('style');\n    document.body.appendChild(style);\n    style.setAttribute('data-context', name);\n    cache = document.styleSheets[document.styleSheets.length - 1];\n    rules = cache.cssRules ? 'cssRules' : 'rules';\n    remove = cache.removeRule ? 'removeRule' : 'deleteRule';\n    return cache;\n  }\n  function add(selector, styles) {\n    var css = parseStyles(styles);\n    var sheet = getStylesheet();\n    var len = sheet[rules].length;\n    if (sheet.insertRule) {\n      sheet.insertRule(selector + '{' + css + '}', len);\n    } else if (sheet.addRule) {\n      sheet.addRule(selector, css, len);\n    }\n  }\n  function remove(selector) {\n    var sheet = getStylesheet();\n    var length = sheet[rules].length;\n    var i;\n    for (i = length - 1; i >= 0; i--) {\n      if (sheet[rules][i].selectorText === selector) {\n        sheet[remove](i);\n      }\n    }\n  }\n  function clear() {\n    var sheet = getStylesheet();\n    while (sheet[rules].length) {\n      sheet[remove](0);\n    }\n  }\n  add.clear = clear;\n  add.remove = remove;\n  contexts[name] = add;\n  return contexts[name];\n}\nvar ctx = context('default');\nctx.context = context;\nmodule.exports = ctx;","map":null,"metadata":{},"sourceType":"script"}